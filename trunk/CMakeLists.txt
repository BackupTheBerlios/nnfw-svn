
PROJECT( NNFW )
SET( CMAKE_COLOR_MAKEFILE ON )

### Configure of Library
### a string variable that contains configuration keys separated by with spaces:
### - double     <= use double precision for Real number
### - debug      <= compile with debug flags activated
### - gsl        <= link against GSL library
### - mkl        <= link against MKL library
### Default (empty) means that it will be compiled optimized without debug, GSL and MKL with single precision
SET( NNFW_CONFIG "" CACHE STRING "NNFW Generation Configuration" )

### Setting Compiler g++ for linux machines
IF (UNIX)
    MESSAGE( "-- Setting compiler for Linux" )
    ### --- configure libxml2 flags and libs
    EXEC_PROGRAM( "xml2-config --cflags" OUTPUT_VARIABLE LIBXML2_FLAGS )
    EXEC_PROGRAM( "xml2-config --libs"   OUTPUT_VARIABLE LIBXML2_LIBS )
    SET( CMAKE_CXX_COMPILER "g++" )
    SET( CMAKE_CXX_FLAGS " -pipe -fno-strict-aliasing -Wall -W ${LIBXML2_FLAGS}" )
    SET( CMAKE_EXE_LINKER_FLAGS "${LIBXML2_LIBS}" )
    ### --- debug check
    IF ( NNFW_CONFIG MATCHES debug )
        ## Debug version
        SET( CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} " -g -O0 " )
        ADD_DEFINITIONS( "-DNNFW_DEBUG" )
    ELSE ( NNFW_CONFIG MATCHES debug )
        ## Optimized version
        SET( CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} " -O3 -funroll-loops " )
    ENDIF ( NNFW_CONFIG MATCHES debug )

    ### --- double check
    IF ( NNFW_CONFIG MATCHES double )
        ADD_DEFINITIONS( "-DNNFW_DOUBLE_PRECISION" )
    ENDIF ( NNFW_CONFIG MATCHES double )

    ### --- gsl check
    IF ( NNFW_CONFIG MATCHES gsl )
        ADD_DEFINITIONS( "-DNNFW_USE_GSL" )
    ENDIF ( NNFW_CONFIG MATCHES gsl )

    ### --- mkl check
    IF ( NNFW_CONFIG MATCHES mkl )
        IF ( NOT MKL_CACHED )
            EXEC_PROGRAM( "rpm -qa | grep mkl" OUTPUT_VARIABLE INTEL_MKL )
            EXEC_PROGRAM( "rpm -ql ${INTEL_MKL} | grep include$" OUTPUT_VARIABLE MKL_INC )
            SET( MKL_PATH ${MKL_INC} CACHE INTERNAL "MKL_PATH" )
            SET( MKL_CACHED TRUE CACHE INTERNAL "MKL_CACHED" )
        ENDIF ( NOT MKL_CACHED )
        ADD_DEFINITIONS( "-DNNFW_USE_MKL" )
    ENDIF ( NNFW_CONFIG MATCHES mkl )

    ### --- replace spurious ';' with blank space
    STRING( REPLACE ";" "" CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} )
ENDIF (UNIX)

SET( NNFW_SRCS ./src/propertized.cpp ./src/cluster.cpp ./src/linker.cpp ./src/simplecluster.cpp ./src/biasedcluster.cpp ./src/fakecluster.cpp ./src/ddecluster.cpp ./src/outputfunction.cpp ./src/liboutputfunctions.cpp ./src/matrixlinker.cpp ./src/sparsematrixlinker.cpp ./src/copylinker.cpp ./src/neuralnet.cpp ./src/utils.cpp ./src/nnfwfactory.cpp ./src/messages.cpp ./src/random.cpp ./src/types.cpp ./src/realvec.cpp ./src/realmat.cpp ./src/blockslearning.cpp ./src/learningnetwork.cpp ./src/ionnfw.cpp ./src/xmlnnfw.cpp ./src/libmatrixmodifiers.cpp )

SET( NNFW_HDRS ./include/nnfw.h ./include/primtypes.h ./include/types.h ./include/memutils.h ./include/observ.h ./include/clonable.h ./include/propertized.h ./include/vectordata.h ./include/matrixdata.h ./include/realvec.h ./include/realmat.h ./include/updatable.h ./include/cluster.h ./include/simplecluster.h ./include/biasedcluster.h ./include/fakecluster.h ./include/ddecluster.h ./include/outputfunction.h ./include/derivableoutputfunction.h ./include/liboutputfunctions.h ./include/linker.h ./include/copylinker.h ./include/matrixlinker.h ./include/sparsematrixlinker.h ./include/neuralnet.h ./include/utils.h ./include/nnfwfactory.h ./include/messages.h ./include/random.h ./include/blockslearning.h ./include/learningnetwork.h ./include/ionnfw.h ./include/libmatrixmodifiers.h ./include/learningalgorithm.h ./include/modifier.h )

INCLUDE_DIRECTORIES( ./include ${MKL_PATH} )
ADD_LIBRARY( nnfw STATIC ${NNFW_SRCS} )
SET(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR}/lib)

INSTALL( TARGETS nnfw ARCHIVE DESTINATION lib )
INSTALL( FILES ${NNFW_HDRS} DESTINATION include/nnfw )

