PROJECT( NNFW )
SET( CMAKE_COLOR_MAKEFILE ON )

###### VERSION INFORMATION
SET( VER_MAJ 1 )
SET( VER_MIN 1 )
SET( VER_PAT 1 )

### Configure of Library
### a string variable that contains configuration keys separated by with spaces:
### - double     <= use double precision for Real number
### - gsl        <= link against GSL library
### - mkl        <= link against MKL library
### - shared     <= generates a shared library
### Default (empty) means: static, single precision, without GSL & MKL.
SET( NNFW_CONFIG "" CACHE STRING "NNFW Configuration" )

### configure CMake to link against Qt4
FIND_PACKAGE( Qt4 REQUIRED )
SET( QT_DONTUSE_QTGUI TRUE )
SET( QT_USE_QTXML TRUE )
INCLUDE(${QT_USE_FILE})

FILE( GLOB NNFW_SRCS ./src/*.cpp )
FILE( GLOB NNFW_HDRS ./include/*.h )

INCLUDE_DIRECTORIES( ./include )
### Directory where Library will be installed
SET( LIB_DIR "lib" )
IF (UNIX)
	### check the type of machine
	EXEC_PROGRAM( uname ARGS -m OUTPUT_VARIABLE ARCHTYPE )
	IF ( ARCHTYPE MATCHES "x86_64" )
		SET( LIB_DIR "lib64" )
	ENDIF ( ARCHTYPE MATCHES "x86_64" )
ENDIF (UNIX)

SET( USE_FRAMEWORKS FALSE )
IF ( NNFW_CONFIG MATCHES shared )
    ADD_LIBRARY( nnfw SHARED ${NNFW_SRCS} ${NNFW_HDRS} ${NNFW_BINARY_DIR}/NNFWConfig.cmake GPL.txt CHANGELOG COPYING CREDITS INSTALL README RELEASENOTES )
	IF( CMAKE_CACHE_MAJOR_VERSION EQUAL 2 AND CMAKE_CACHE_MINOR_VERSION LESS 5 )
		INSTALL( TARGETS nnfw LIBRARY DESTINATION ${LIB_DIR} )
	ELSE( CMAKE_CACHE_MAJOR_VERSION EQUAL 2 AND CMAKE_CACHE_MINOR_VERSION LESS 5 )
		IF( APPLE )
			INSTALL( TARGETS nnfw LIBRARY DESTINATION ./ FRAMEWORK DESTINATION ./ )
			SET_TARGET_PROPERTIES( nnfw PROPERTIES
				FRAMEWORK TRUE
				FRAMEWORK_VERSION "${VER_MAJ}.${VER_MIN}"
				PRIVATE_HEADER ""
				PUBLIC_HEADER "${NNFW_HDRS}"
				RESOURCE "NNFWConfig.cmake;GPL.txt;CHANGELOG;COPYING;CREDITS;INSTALL;README;RELEASENOTES"
			)
			SET( USE_FRAMEWORKS TRUE )
		ELSE( APPLE )
			INSTALL( TARGETS nnfw LIBRARY DESTINATION ${LIB_DIR} )
		ENDIF( APPLE )
	ENDIF( CMAKE_CACHE_MAJOR_VERSION EQUAL 2 AND CMAKE_CACHE_MINOR_VERSION LESS 5 )
ELSE ( NNFW_CONFIG MATCHES shared )
    ADD_LIBRARY( nnfw STATIC ${NNFW_SRCS} )
    INSTALL( TARGETS nnfw ARCHIVE DESTINATION ${LIB_DIR} )
ENDIF ( NNFW_CONFIG MATCHES shared )

SET_TARGET_PROPERTIES( nnfw PROPERTIES VERSION ${VER_MAJ}.${VER_MIN}.${VER_PAT} SOVERSION ${VER_MAJ}.${VER_MIN} )
TARGET_LINK_LIBRARIES( nnfw ${QT_LIBRARIES} )

IF( WIN32 )
	INSTALL( FILES "${NNFW_SOURCE_DIR}/GPL.txt" DESTINATION . )
	INSTALL( FILES "${NNFW_SOURCE_DIR}/CHANGELOG" DESTINATION . )
	INSTALL( FILES "${NNFW_SOURCE_DIR}/COPYING" DESTINATION . )
	INSTALL( FILES "${NNFW_SOURCE_DIR}/CREDITS" DESTINATION . )
	INSTALL( FILES "${NNFW_SOURCE_DIR}/INSTALL" DESTINATION . )
	INSTALL( FILES "${NNFW_SOURCE_DIR}/README" DESTINATION . )
	INSTALL( FILES "${NNFW_SOURCE_DIR}/RELEASENOTES" DESTINATION . )
	INSTALL( FILES ${NNFW_HDRS} DESTINATION include/nnfw )
ELSE( WIN32 )
IF(NOT USE_FRAMEWORKS )
	INSTALL( FILES "${NNFW_SOURCE_DIR}/GPL.txt" DESTINATION share/nnfw )
	INSTALL( FILES "${NNFW_SOURCE_DIR}/CHANGELOG" DESTINATION share/nnfw )
	INSTALL( FILES "${NNFW_SOURCE_DIR}/COPYING" DESTINATION share/nnfw )
	INSTALL( FILES "${NNFW_SOURCE_DIR}/CREDITS" DESTINATION share/nnfw )
	INSTALL( FILES "${NNFW_SOURCE_DIR}/INSTALL" DESTINATION share/nnfw )
	INSTALL( FILES "${NNFW_SOURCE_DIR}/README" DESTINATION share/nnfw )
	INSTALL( FILES "${NNFW_SOURCE_DIR}/RELEASENOTES" DESTINATION share/nnfw )
	INSTALL( FILES ${NNFW_HDRS} DESTINATION include/nnfw )
ENDIF(NOT USE_FRAMEWORKS )
ENDIF( WIN32 )

### Setting Compiler g++ for linux machines
IF (UNIX)
    MESSAGE( "-- Setting compiler for Linux" )
    SET( CMAKE_CXX_COMPILER "g++" )
    SET( CMAKE_CXX_FLAGS "-pipe -fPIC -Wall -W " )
    SET( CMAKE_CXX_FLAGS_DEBUG "-g -O0 -DNNFW_DEBUG" )
    SET( CMAKE_CXX_FLAGS_RELEASE "-O3  " )
    SET( CMAKE_CXX_FLAGS_RELWITHDEBINFO "-g -O2 -DNNFW_DEBUG" )
    SET( CMAKE_CXX_FLAGS_MINSIZEREL "-O2 -Os" )
    SET_TARGET_PROPERTIES( nnfw PROPERTIES COMPILE_FLAGS "" )
    SET_TARGET_PROPERTIES( nnfw PROPERTIES LINK_FLAGS "" )
    ### --- double check
    IF ( NNFW_CONFIG MATCHES double )
        ADD_DEFINITIONS( "-DNNFW_DOUBLE_PRECISION" )
    ENDIF ( NNFW_CONFIG MATCHES double )
    ### --- gsl check
    IF ( NNFW_CONFIG MATCHES gsl )
        EXEC_PROGRAM( gsl-config ARGS --libs OUTPUT_VARIABLE GSL_LIB )
        EXEC_PROGRAM( gsl-config ARGS --cflags OUTPUT_VARIABLE GSL_FLAGS )
        GET_TARGET_PROPERTY( TMP nnfw COMPILE_FLAGS )
        SET_TARGET_PROPERTIES( nnfw PROPERTIES COMPILE_FLAGS "${TMP} ${GSL_FLAGS} -DNNFW_USE_GSL" )
        GET_TARGET_PROPERTY( TMP nnfw LINK_FLAGS )
        SET_TARGET_PROPERTIES( nnfw PROPERTIES LINK_FLAGS "${TMP} ${GSL_LIB} -DNNFW_USE_GSL" )
    ENDIF ( NNFW_CONFIG MATCHES gsl )
    ### --- mkl check
    IF ( NNFW_CONFIG MATCHES mkl )
        IF ( NOT MKL_CACHED )
            EXEC_PROGRAM( "rpm -qa | grep mkl" OUTPUT_VARIABLE INTEL_MKL )
            EXEC_PROGRAM( "rpm -ql ${INTEL_MKL} | grep include$" OUTPUT_VARIABLE MKL_INC )
            SET( MKL_PATH ${MKL_INC} CACHE INTERNAL "MKL_PATH" )
            SET( MKL_CACHED TRUE CACHE INTERNAL "MKL_CACHED" )
        ENDIF ( NOT MKL_CACHED )
        GET_TARGET_PROPERTY( TMP nnfw COMPILE_FLAGS )
        SET_TARGET_PROPERTIES( nnfw PROPERTIES COMPILE_FLAGS "${TMP} -I${MKL_PATH} -DNNFW_USE_MKL" )
    ENDIF ( NNFW_CONFIG MATCHES mkl )
ENDIF (UNIX)

### create the nnfw-config script
IF (UNIX)
    ## CFLAGS
    IF ( NNFW_CONFIG MATCHES double )
        SET( CFLA " -DNNFW_DOUBLE_PRECISION " )
    ENDIF ( NNFW_CONFIG MATCHES double )
    IF ( NNFW_CONFIG MATCHES mkl )
		SET( CFLA "${CFLA} -I${MKL_PATH}" )
	ENDIF ( NNFW_CONFIG MATCHES mkl )
	## include directory
	IF( APPLE )
		SET( INCLUDES "${CMAKE_INSTALL_PREFIX}/Library/Frameworks/nnfw.framework/Headers" )
	ELSE( APPLE )
		SET( INCLUDES "${CMAKE_INSTALL_PREFIX}/include" )
	ENDIF( APPLE )
    ## Library
	IF ( NNFW_CONFIG MATCHES shared )
		IF ( NNFW_CONFIG MATCHES mkl )
			SET( LFLA "-Wl,-rpath,${MKL_PATH}/../lib/32 -L${MKL_PATH}/../lib/32 -lvml " )
		ENDIF ( NNFW_CONFIG MATCHES mkl )
		IF( USE_FRAMEWORKS )
			SET( LFLA "-F${CMAKE_INSTALL_PREFIX}/Library/Frameworks -framework nnfw -Wl,-rpath,${CMAKE_INSTALL_PREFIX}/Library/Frameworks/nnfw.framework ${LFLA}" )
		ELSE( USE_FRAMEWORKS )
			SET( LFLA "-L${CMAKE_INSTALL_PREFIX}/lib -lnnfw -Wl,-rpath,${CMAKE_INSTALL_PREFIX}/${LIB_DIR} ${LFLA}" )
		ENDIF( USE_FRAMEWORKS )
	ELSE ( NNFW_CONFIG MATCHES shared )
        EXEC_PROGRAM( gsl-config ARGS --libs-without-cblas OUTPUT_VARIABLE GSL_ELIB )
		IF ( NNFW_CONFIG MATCHES mkl )
			SET( LFLA "-Wl,-rpath,${MKL_PATH}/../lib/32 -L${MKL_PATH}/../lib/32 -lmkl -lvml " )
		ENDIF ( NNFW_CONFIG MATCHES mkl )
		IF( APPLE )
			SET( LFLA "-L${CMAKE_INSTALL_PREFIX}/lib -lnnfw ${LFLA} ${GSL_ELIB} -F${QT_LIBRARY_DIR} -framework QtXml" )
		ELSE( APPLE )
			SET( LFLA "-L${CMAKE_INSTALL_PREFIX}/lib -lnnfw ${LFLA} ${GSL_ELIB} -L${QT_LIBRARY_DIR} -lQtXml" )
		ENDIF( APPLE )
	ENDIF ( NNFW_CONFIG MATCHES shared )

	CONFIGURE_FILE( ${NNFW_SOURCE_DIR}/bin/nnfw-config_template ${NNFW_BINARY_DIR}/nnfw-config @ONLY IMMEDIATE )
	CONFIGURE_FILE( ${NNFW_SOURCE_DIR}/NNFWConfig.cmake ${NNFW_BINARY_DIR}/NNFWConfig.cmake @ONLY IMMEDIATE )

IF( USE_FRAMEWORKS )
	ADD_CUSTOM_COMMAND( TARGET nnfw POST_BUILD
		COMMAND chmod +x nnfw-config
		COMMAND cp nnfw-config nnfw.framework
	)
ELSE( USE_FRAMEWORKS )
	INSTALL( FILES "${NNFW_BINARY_DIR}/NNFWConfig.cmake" DESTINATION include/nnfw )
	INSTALL( PROGRAMS ${NNFW_BINARY_DIR}/nnfw-config DESTINATION bin )
	INSTALL( FILES "${NNFW_SOURCE_DIR}/FindNNFW.cmake" DESTINATION ${CMAKE_ROOT}/Modules )
ENDIF( USE_FRAMEWORKS )
ENDIF (UNIX)

### Setting For Win32 machines
IF( WIN32 AND NOT UNIX )
	ADD_DEFINITIONS( -DNNFW_BUILDING_DLL )
	IF( CMAKE_BUILD_TYPE MATCHES Debug OR CMAKE_BUILD_TYPE MATCHES RelWithDebInfo )
		ADD_DEFINITIONS( -DNNFW_DEBUG )
	ENDIF( CMAKE_BUILD_TYPE MATCHES Debug OR CMAKE_BUILD_TYPE MATCHES RelWithDebInfo )
    ### --- double check
    IF ( NNFW_CONFIG MATCHES double )
        ADD_DEFINITIONS( "-DNNFW_DOUBLE_PRECISION" )
    ENDIF ( NNFW_CONFIG MATCHES double )
	TARGET_LINK_LIBRARIES( nnfw "QtXml4" )
	TARGET_LINK_LIBRARIES( nnfw "QtCore4" )

	## the creation of NNFWConfig.cmake for windows is to correct... fix it
	CONFIGURE_FILE( ${NNFW_SOURCE_DIR}/bin/nnfw-config_template ${NNFW_BINARY_DIR}/nnfw-config @ONLY IMMEDIATE )
	CONFIGURE_FILE( ${NNFW_SOURCE_DIR}/NNFWConfig.cmake ${NNFW_BINARY_DIR}/NNFWConfig.cmake @ONLY IMMEDIATE )

ENDIF( WIN32 AND NOT UNIX )

