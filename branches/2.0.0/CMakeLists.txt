PROJECT( NNFW )
SET( CMAKE_COLOR_MAKEFILE ON )
cmake_minimum_required( VERSION 2.6 )

###### VERSION INFORMATION
SET( VER_MAJ 2 )
SET( VER_MIN 0 )
SET( VER_PAT 0 )

### For Shared configuration look at the ADD_TARGET statement below
SET( IS_SHARED ON CACHE BOOL "If ON compilation will produce a shared library" )

### If true use GSL as low-level random generator
SET( USE_GSL ON CACHE BOOL "If ON will use GSL random generator library" )

### From version 2.0.0 Double is the standard precision
### From version 2.0.0 NNFW_CONFIG is eliminated

### configure CMake to link against Qt4
FIND_PACKAGE( Qt4 REQUIRED )
SET( QT_DONT_USE_QTGUI TRUE )
SET( QT_USE_QTXML TRUE )
INCLUDE(${QT_USE_FILE})

### configure CMake to link against laral libraries
FIND_PACKAGE( LARAL REQUIRED PATHS /home/gianluca/iCubSoftware/opt/laral2 NO_DEFAULT_PATH )
SET( LARAL_USE_UTILITIES TRUE )
INCLUDE( ${LARAL_USE_FILE} )
### this is necessary for NNFWConfig.cmake
LIST( APPEND INCLUDES ${LARAL_INCLUDE_DIRS} )
LIST( APPEND LIBRARIES ${LARAL_LIBRARIES} )
LIST( APPEND LINKDIRS ${LARAL_LINK_DIRS} )

### configure to link against GSL
IF( USE_GSL )
	SET(CMAKE_MODULE_PATH ${NNFW_SOURCE_DIR})
	FIND_PACKAGE( GSL REQUIRED )
	INCLUDE_DIRECTORIES( ${GSL_INCLUDE_DIRS} )
	LINK_DIRECTORIES( ${GSL_LINK_DIRECTORIES} )
	ADD_DEFINITIONS( -DNNFW_USE_GSL )
	### this is necessary for NNFWConfig.cmake
	LIST( APPEND DEFS "-DNNFW_USE_GSL" )
	LIST( APPEND INCLUDES ${GSL_INCLUDE_DIRS} )
	LIST( APPEND LIBRARIES ${GSL_LIBRARIES} )
	LIST( APPEND LINKDIRS ${GSL_LINK_DIRECTORIES} )
ELSE ( USE_GSL )
	SET( GSL_LIBRARIES "" )
ENDIF ( USE_GSL )

### Source files
FILE( GLOB NNFW_SRCS ./src/*.cpp )
FILE( GLOB NNFW_HDRS ./include/*.h )
INCLUDE_DIRECTORIES( ./include )
### Generation of the library
IF ( IS_SHARED )
	ADD_LIBRARY( nnfw SHARED ${NNFW_SRCS} ${NNFW_HDRS} )
	SET_TARGET_PROPERTIES( nnfw PROPERTIES VERSION ${VER_MAJ}.${VER_MIN}.${VER_PAT} SOVERSION ${VER_MAJ}.${VER_MIN} )
ELSE ( IS_SHARED )
	ADD_LIBRARY( nnfw STATIC ${NNFW_SRCS} )
ENDIF ( IS_SHARED )
TARGET_LINK_LIBRARIES( nnfw ${QT_LIBRARIES} ${LARAL_LIBRARIES} ${GSL_LIBRARIES} )

### Generation for NNFWConfig.cmake
### this is necessary for NNFWConfig.cmake
#LIST( APPEND DEFS "-DNNFW_USE_GSL" )
LIST( APPEND INCLUDES "${CMAKE_INSTALL_PREFIX}/include/nnfw" )
LIST( APPEND LIBRARIES "nnfw" )
LIST( APPEND LINKDIRS "${CMAKE_INSTALL_PREFIX}/lib" )
CONFIGURE_FILE( ${NNFW_SOURCE_DIR}/NNFWConfig.cmake.in ${NNFW_BINARY_DIR}/NNFWConfig.cmake @ONLY IMMEDIATE )

### Installation statements
IF( WIN32 )
	INSTALL( FILES "${NNFW_SOURCE_DIR}/GPL.txt" DESTINATION . )
	INSTALL( FILES "${NNFW_SOURCE_DIR}/CHANGELOG" DESTINATION . )
	INSTALL( FILES "${NNFW_SOURCE_DIR}/COPYING" DESTINATION . )
	INSTALL( FILES "${NNFW_SOURCE_DIR}/CREDITS" DESTINATION . )
	INSTALL( FILES "${NNFW_SOURCE_DIR}/INSTALL" DESTINATION . )
	INSTALL( FILES "${NNFW_SOURCE_DIR}/README" DESTINATION . )
	INSTALL( FILES "${NNFW_SOURCE_DIR}/RELEASENOTES" DESTINATION . )
	INSTALL( FILES "${NNFW_BINARY_DIR}/NNFWConfig.cmake" DESTINATION . )
	INSTALL( FILES ${NNFW_HDRS} DESTINATION include/nnfw )
	INSTALL( TARGETS nnfw LIBRARY DESTINATION lib ARCHIVE DESTINATION lib )
ELSE( WIN32 )
	INSTALL( FILES "${NNFW_SOURCE_DIR}/GPL.txt" DESTINATION share/nnfw )
	INSTALL( FILES "${NNFW_SOURCE_DIR}/CHANGELOG" DESTINATION share/nnfw )
	INSTALL( FILES "${NNFW_SOURCE_DIR}/COPYING" DESTINATION share/nnfw )
	INSTALL( FILES "${NNFW_SOURCE_DIR}/CREDITS" DESTINATION share/nnfw )
	INSTALL( FILES "${NNFW_SOURCE_DIR}/INSTALL" DESTINATION share/nnfw )
	INSTALL( FILES "${NNFW_SOURCE_DIR}/README" DESTINATION share/nnfw )
	INSTALL( FILES "${NNFW_SOURCE_DIR}/RELEASENOTES" DESTINATION share/nnfw )
	INSTALL( FILES "${NNFW_BINARY_DIR}/NNFWConfig.cmake" DESTINATION share/nnfw )
	INSTALL( FILES ${NNFW_HDRS} DESTINATION include/nnfw )
	INSTALL( TARGETS nnfw LIBRARY DESTINATION lib ARCHIVE DESTINATION lib )
ENDIF( WIN32 )

### Setting Compiler g++ for linux machines
IF (UNIX)
	MESSAGE( "-- Setting compiler for Linux" )
	IF (APPLE)
		ADD_DEFINITIONS( -DNNFW_MAC )
		LIST( APPEND DEFS "-DNNFW_MAC" )
	ELSE (APPLE)
		ADD_DEFINITIONS( -DNNFW_LINUX )
		LIST( APPEND DEFS "-DNNFW_LINUX" )
	ENDIF (APPLE)
	SET( CMAKE_CXX_COMPILER "g++" )
	SET( CMAKE_CXX_FLAGS "-pipe -fPIC -Wall -W " )
	SET( CMAKE_CXX_FLAGS_DEBUG "-g -O0 -DNNFW_DEBUG" )
	SET( CMAKE_CXX_FLAGS_RELEASE "-O3  " )
	SET( CMAKE_CXX_FLAGS_RELWITHDEBINFO "-g -O2 -DNNFW_DEBUG" )
	SET( CMAKE_CXX_FLAGS_MINSIZEREL "-O2 -Os" )
	### --- Setting the compatibility and current versions in Apple dynamic libraries
	IF ( APPLE AND IS_SHARED )
		SET_TARGET_PROPERTIES( nnfw PROPERTIES LINK_FLAGS "-Wl,-compatibility_version,${VER_MAJ}.${VER_MIN} -Wl,-current_version,${VER_MAJ}.${VER_MIN}" )
	ENDIF ( APPLE AND IS_SHARED )
ENDIF (UNIX)

### Setting For Win32 machines
IF( WIN32 AND NOT UNIX )
	ADD_DEFINITIONS( -DNNFW_WIN )
	LIST( APPEND DEFS "-DNNFW_WIN" )
	IF ( IS_SHARED )
		ADD_DEFINITIONS( -DNNFW_BUILDING_DLL )
	ELSE ( IS_SHARED )
		ADD_DEFINITIONS( -DNNFW_DONT_EXPORT )
	ENDIF ( IS_SHARED )
	IF( CMAKE_BUILD_TYPE MATCHES Debug OR CMAKE_BUILD_TYPE MATCHES RelWithDebInfo )
		ADD_DEFINITIONS( -DNNFW_DEBUG )
	ENDIF( CMAKE_BUILD_TYPE MATCHES Debug OR CMAKE_BUILD_TYPE MATCHES RelWithDebInfo )
ENDIF( WIN32 AND NOT UNIX )

