PROJECT( NNFW )
SET( CMAKE_COLOR_MAKEFILE ON )
cmake_minimum_required( VERSION 2.6 )

###### VERSION INFORMATION
SET( VER_MAJ 2 )
SET( VER_MIN 0 )
SET( VER_PAT 0 )

### Configurations of the Library
### For Shared configuration look at the ADD_TARGET statement below
SET( IS_SHARED ON CACHE BOOL "If ON compilation will produce a shared library" )
### If true use GSL as low-level random generator
SET( USE_GSL ON CACHE BOOL "If ON will use GSL random generator library" )
IF ( UNIX AND NOT APPLE )
	### If true use MKL as low-level algebra calculations
	SET( USE_MKL ON CACHE BOOL "If ON will use MKL for low-level algebra calculations" )
ENDIF( UNIX AND NOT APPLE )
### From version 2.0.0 Double is the standard precision
### From version 2.0.0 NNFW_CONFIG is eliminated
IF ( APPLE )
	### If true use FRAMEWORKS
	SET( USE_FRAMEWORKS ON CACHE BOOL "If ON will generate an Apple framework" )
ELSE ( APPLE )
	SET( USE_FRAMEWORKS OFF INTERNAL )
ENDIF ( APPLE )

### configure CMake to link against Qt4
FIND_PACKAGE( Qt4 REQUIRED )
SET( QT_DONT_USE_QTGUI TRUE )
SET( QT_USE_QTXML TRUE )
INCLUDE(${QT_USE_FILE})

FILE( GLOB NNFW_SRCS ./src/*.cpp )
FILE( GLOB NNFW_HDRS ./include/*.h )

FILE( GLOB C_NNFW_SRCS ./cinterface/*.cpp )
FILE( GLOB C_NNFW_HDRS ./cinterface/*.h )

INCLUDE_DIRECTORIES( ./include )
### Directory where Library will be installed
SET( LIB_DIR "lib" )
IF (UNIX)
	### check the type of machine
	EXEC_PROGRAM( uname ARGS -m OUTPUT_VARIABLE ARCHTYPE )
	IF ( ARCHTYPE MATCHES "x86_64" )
		SET( LIB_DIR "lib64" )
	ENDIF ( ARCHTYPE MATCHES "x86_64" )
ENDIF (UNIX)

IF ( IS_SHARED )
	IF( USE_FRAMEWORKS )
		ADD_LIBRARY( nnfw SHARED ${NNFW_SRCS} ${NNFW_HDRS} ${NNFW_BINARY_DIR}/NNFWConfigVersion.cmake ${NNFW_BINARY_DIR}/NNFWConfig.cmake ${NNFW_BINARY_DIR}/nnfw-config GPL.txt CHANGELOG COPYING CREDITS INSTALL README RELEASENOTES )
		ADD_LIBRARY( cnnfw SHARED ${C_NNFW_SRCS} ${NNFW_SRCS} ${C_NNFW_HDRS} ${NNFW_BINARY_DIR}/NNFWConfigVersion.cmake ${NNFW_BINARY_DIR}/NNFWConfig.cmake ${NNFW_BINARY_DIR}/nnfw-config GPL.txt CHANGELOG COPYING CREDITS INSTALL README RELEASENOTES )
		INSTALL( TARGETS nnfw LIBRARY DESTINATION ./ FRAMEWORK DESTINATION ./ )
		SET_TARGET_PROPERTIES( nnfw PROPERTIES
			FRAMEWORK TRUE
			FRAMEWORK_VERSION "${VER_MAJ}.${VER_MIN}"
			PRIVATE_HEADER ""
			PUBLIC_HEADER "${NNFW_HDRS}"
			RESOURCE "${NNFW_BINARY_DIR}/nnfw-config;NNFWConfigVersion.cmake;NNFWConfig.cmake;GPL.txt;CHANGELOG;COPYING;CREDITS;INSTALL;README;RELEASENOTES"
			MACOSX_FRAMEWORK_IDENTIFIER "${CMAKE_INSTALL_PREFIX}/nnfw.framework/nnfw"
			MACOSX_FRAMEWORK_SHORT_VERSION_STRING "${VER_MAJ}.${VER_MIN}"
			INSTALL_NAME_DIR "${CMAKE_INSTALL_PREFIX}"
		)
		INSTALL( TARGETS cnnfw LIBRARY DESTINATION ./ FRAMEWORK DESTINATION ./ )
		SET_TARGET_PROPERTIES( cnnfw PROPERTIES
			FRAMEWORK TRUE
			FRAMEWORK_VERSION "${VER_MAJ}.${VER_MIN}"
			PRIVATE_HEADER ""
			PUBLIC_HEADER "${C_NNFW_HDRS}"
			RESOURCE "${NNFW_BINARY_DIR}/nnfw-config;NNFWConfigVersion.cmake;NNFWConfig.cmake;GPL.txt;CHANGELOG;COPYING;CREDITS;INSTALL;README;RELEASENOTES"
			MACOSX_FRAMEWORK_IDENTIFIER "${CMAKE_INSTALL_PREFIX}/cnnfw.framework/cnnfw"
			MACOSX_FRAMEWORK_SHORT_VERSION_STRING "${VER_MAJ}.${VER_MIN}"
			INSTALL_NAME_DIR "${CMAKE_INSTALL_PREFIX}"
		)
		INSTALL( FILES ${NNFW_HDRS} DESTINATION nnfw.framework/Headers/nnfw )
		INSTALL( FILES ${C_NNFW_HDRS} DESTINATION cnnfw.framework/Headers/nnfw )
	ELSE( USE_FRAMEWORKS )
		ADD_LIBRARY( nnfw SHARED ${NNFW_SRCS} ${NNFW_HDRS} )
		ADD_LIBRARY( cnnfw SHARED ${C_NNFW_SRCS} ${NNFW_SRCS} ${C_NNFW_HDRS} )
		INSTALL( TARGETS nnfw LIBRARY DESTINATION ${LIB_DIR} )
		INSTALL( TARGETS cnnfw LIBRARY DESTINATION ${LIB_DIR} )
	ENDIF( USE_FRAMEWORKS )
	SET_TARGET_PROPERTIES( nnfw PROPERTIES VERSION ${VER_MAJ}.${VER_MIN}.${VER_PAT} SOVERSION ${VER_MAJ}.${VER_MIN} )
	SET_TARGET_PROPERTIES( cnnfw PROPERTIES VERSION ${VER_MAJ}.${VER_MIN}.${VER_PAT} SOVERSION ${VER_MAJ}.${VER_MIN} )
ELSE ( IS_SHARED )
	IF( USE_FRAMEWORKS )
		MESSAGE( "=== ERROR: You cannont create a Frameworks containing Static library" )
	ENDIF( USE_FRAMEWORKS )
	ADD_LIBRARY( nnfw STATIC ${NNFW_SRCS} )
	INSTALL( TARGETS nnfw ARCHIVE DESTINATION ${LIB_DIR} )
	ADD_LIBRARY( cnnfw STATIC ${C_NNFW_SRCS} ${NNFW_SRCS} )
	INSTALL( TARGETS cnnfw ARCHIVE DESTINATION ${LIB_DIR} )
ENDIF ( IS_SHARED )

TARGET_LINK_LIBRARIES( nnfw ${QT_LIBRARIES} )
TARGET_LINK_LIBRARIES( cnnfw ${QT_LIBRARIES} )

IF( WIN32 )
	INSTALL( FILES "${NNFW_SOURCE_DIR}/GPL.txt" DESTINATION . )
	INSTALL( FILES "${NNFW_SOURCE_DIR}/CHANGELOG" DESTINATION . )
	INSTALL( FILES "${NNFW_SOURCE_DIR}/COPYING" DESTINATION . )
	INSTALL( FILES "${NNFW_SOURCE_DIR}/CREDITS" DESTINATION . )
	INSTALL( FILES "${NNFW_SOURCE_DIR}/INSTALL" DESTINATION . )
	INSTALL( FILES "${NNFW_SOURCE_DIR}/README" DESTINATION . )
	INSTALL( FILES "${NNFW_SOURCE_DIR}/RELEASENOTES" DESTINATION . )
	INSTALL( FILES ${NNFW_HDRS} DESTINATION include/nnfw )
	INSTALL( FILES ${C_NNFW_HDRS} DESTINATION include/nnfw )
ELSE( WIN32 )
	IF(NOT USE_FRAMEWORKS )
		INSTALL( FILES "${NNFW_SOURCE_DIR}/GPL.txt" DESTINATION share/nnfw )
		INSTALL( FILES "${NNFW_SOURCE_DIR}/CHANGELOG" DESTINATION share/nnfw )
		INSTALL( FILES "${NNFW_SOURCE_DIR}/COPYING" DESTINATION share/nnfw )
		INSTALL( FILES "${NNFW_SOURCE_DIR}/CREDITS" DESTINATION share/nnfw )
		INSTALL( FILES "${NNFW_SOURCE_DIR}/INSTALL" DESTINATION share/nnfw )
		INSTALL( FILES "${NNFW_SOURCE_DIR}/README" DESTINATION share/nnfw )
		INSTALL( FILES "${NNFW_SOURCE_DIR}/RELEASENOTES" DESTINATION share/nnfw )
		INSTALL( FILES ${NNFW_HDRS} DESTINATION include/nnfw )
		INSTALL( FILES ${C_NNFW_HDRS} DESTINATION include/nnfw )
	ENDIF(NOT USE_FRAMEWORKS )
ENDIF( WIN32 )

### Setting Compiler g++ for linux machines
IF (UNIX)
	MESSAGE( "-- Setting compiler for Linux" )
	IF (APPLE)
		ADD_DEFINITIONS( -DNNFW_MAC )
	ELSE (APPLE)
		ADD_DEFINITIONS( -DNNFW_LINUX )
	ENDIF (APPLE)
	SET( CMAKE_CXX_COMPILER "g++" )
	SET( CMAKE_CXX_FLAGS "-pipe -fPIC -Wall -W " )
	SET( CMAKE_CXX_FLAGS_DEBUG "-g -O0 -DNNFW_DEBUG" )
	SET( CMAKE_CXX_FLAGS_RELEASE "-O3  " )
	SET( CMAKE_CXX_FLAGS_RELWITHDEBINFO "-g -O2 -DNNFW_DEBUG" )
	SET( CMAKE_CXX_FLAGS_MINSIZEREL "-O2 -Os" )
	SET_TARGET_PROPERTIES( nnfw PROPERTIES COMPILE_FLAGS "" )
	SET_TARGET_PROPERTIES( nnfw PROPERTIES LINK_FLAGS "" )
	SET_TARGET_PROPERTIES( cnnfw PROPERTIES COMPILE_FLAGS " -DNNFW_DONT_EXPORT " )
	SET_TARGET_PROPERTIES( cnnfw PROPERTIES LINK_FLAGS " -static-libgcc " )
	### --- Setting the compatibility and current versions in Apple dynamic libraries
	IF ( APPLE AND IS_SHARED )
		SET_TARGET_PROPERTIES( nnfw PROPERTIES LINK_FLAGS "-Wl,-compatibility_version,${VER_MAJ}.${VER_MIN} -Wl,-current_version,${VER_MAJ}.${VER_MIN}" )
		SET_TARGET_PROPERTIES( cnnfw PROPERTIES LINK_FLAGS "-Wl,-compatibility_version,${VER_MAJ}.${VER_MIN} -Wl,-current_version,${VER_MAJ}.${VER_MIN}" )
	ENDIF ( APPLE AND IS_SHARED )
	### --- gsl check
	IF ( USE_GSL )
		EXEC_PROGRAM( gsl-config ARGS --libs OUTPUT_VARIABLE GSL_LIB )
		EXEC_PROGRAM( gsl-config ARGS --cflags OUTPUT_VARIABLE GSL_FLAGS )
		GET_TARGET_PROPERTY( TMP nnfw COMPILE_FLAGS )
		SET_TARGET_PROPERTIES( nnfw PROPERTIES COMPILE_FLAGS "${TMP} ${GSL_FLAGS} -DNNFW_USE_GSL" )
		GET_TARGET_PROPERTY( TMP cnnfw COMPILE_FLAGS )
		SET_TARGET_PROPERTIES( cnnfw PROPERTIES COMPILE_FLAGS "${TMP} ${GSL_FLAGS} -DNNFW_USE_GSL" )
		GET_TARGET_PROPERTY( TMP nnfw LINK_FLAGS )
		SET_TARGET_PROPERTIES( nnfw PROPERTIES LINK_FLAGS "${TMP} ${GSL_LIB} -DNNFW_USE_GSL" )
		GET_TARGET_PROPERTY( TMP cnnfw LINK_FLAGS )
		SET_TARGET_PROPERTIES( cnnfw PROPERTIES LINK_FLAGS "${TMP} ${GSL_LIB} -DNNFW_USE_GSL" )
	ENDIF ( USE_GSL )
	### --- mkl check
	IF ( USE_MKL )
		IF ( NOT MKL_CACHED )
			EXEC_PROGRAM( "rpm -qa | grep mkl" OUTPUT_VARIABLE INTEL_MKL )
			EXEC_PROGRAM( "rpm -ql ${INTEL_MKL} | grep include$" OUTPUT_VARIABLE MKL_INC )
			SET( MKL_PATH ${MKL_INC} CACHE INTERNAL "MKL_PATH" )
			SET( MKL_CACHED TRUE CACHE INTERNAL "MKL_CACHED" )
		ENDIF ( NOT MKL_CACHED )
		GET_TARGET_PROPERTY( TMP nnfw COMPILE_FLAGS )
		SET_TARGET_PROPERTIES( nnfw PROPERTIES COMPILE_FLAGS "${TMP} -I${MKL_PATH} -DNNFW_USE_MKL" )
		GET_TARGET_PROPERTY( TMP cnnfw COMPILE_FLAGS )
		SET_TARGET_PROPERTIES( cnnfw PROPERTIES COMPILE_FLAGS "${TMP} -I${MKL_PATH} -DNNFW_USE_MKL" )
	ENDIF ( USE_MKL )
ENDIF (UNIX)

### create the nnfw-config script
IF (UNIX)
	SET( INCLUDES_CPP "" )
	SET( INCLUDES_C "" )
	SET( LIBRARIES_CPP "" )
	SET( LIBRARIES_C "" )
	IF ( USE_MKL )
		SET( INCLUDES_CPP "${INCLUDES_CPP} -I${MKL_PATH}" )
		SET( INCLUDES_C "${INCLUDES_C} -I${MKL_PATH}" )
	ENDIF ( USE_MKL )
	## include directory
	IF( USE_FRAMEWORKS )
		SET( INCLUDES_CPP "${INCLUDES_CPP} -I${CMAKE_INSTALL_PREFIX}/nnfw.framework/Headers" )
		SET( INCLUDES_C "${INCLUDES_C} -I${CMAKE_INSTALL_PREFIX}/cnnfw.framework/Headers" )
	ELSE( USE_FRAMEWORKS )
		SET( INCLUDES_CPP "-I${CMAKE_INSTALL_PREFIX}/include" )
		SET( INCLUDES_C "-I${CMAKE_INSTALL_PREFIX}/include" )
	ENDIF( USE_FRAMEWORKS )
	## Library
		IF ( USE_MKL )
			SET( LIBRARIES_CPP "-Wl,-rpath,${MKL_PATH}/../lib/32 -L${MKL_PATH}/../lib/32 -lvml ${LIBRARIES_CPP}" )
			SET( LIBRARIES_C "-Wl,-rpath,${MKL_PATH}/../lib/32 -L${MKL_PATH}/../lib/32 -lvml ${LIBRARIES_C}" )
		ENDIF ( USE_MKL )
		IF( USE_FRAMEWORKS )
			SET( LIBRARIES_CPP "-F${CMAKE_INSTALL_PREFIX} -framework nnfw ${LIBRARIES_CPP}" )
			SET( LIBRARIES_C "-F${CMAKE_INSTALL_PREFIX} -framework cnnfw ${LIBRARIES_C}" )
		ELSE( USE_FRAMEWORKS )
			SET( LIBRARIES_CPP "-L${CMAKE_INSTALL_PREFIX}/lib -Wl,-rpath,${CMAKE_INSTALL_PREFIX}/${LIB_DIR} -lnnfw ${LIBRARIES_CPP}" )
			SET( LIBRARIES_C "-L${CMAKE_INSTALL_PREFIX}/lib -Wl,-rpath,${CMAKE_INSTALL_PREFIX}/${LIB_DIR} -lcnnfw ${LIBRARIES_C}" )
		ENDIF( USE_FRAMEWORKS )
	IF ( NOT IS_SHARED )
		EXEC_PROGRAM( gsl-config ARGS --libs-without-cblas OUTPUT_VARIABLE GSL_ELIB )
		SET( LIBRARIES_CPP "${GSL_ELIB} ${LIBRARIES_CPP}" )
		SET( LIBRARIES_C "${GSL_ELIB} ${LIBRARIES_C}" )
	ENDIF ( NOT IS_SHARED )

	CONFIGURE_FILE( ${NNFW_SOURCE_DIR}/bin/nnfw-config_template ${NNFW_BINARY_DIR}/nnfw-config @ONLY IMMEDIATE )
	CONFIGURE_FILE( ${NNFW_SOURCE_DIR}/NNFWConfigVersion.cmake ${NNFW_BINARY_DIR}/NNFWConfigVersion.cmake @ONLY IMMEDIATE )
	CONFIGURE_FILE( ${NNFW_SOURCE_DIR}/NNFWConfig.cmake ${NNFW_BINARY_DIR}/NNFWConfig.cmake @ONLY IMMEDIATE )

	IF( NOT USE_FRAMEWORKS )
		INSTALL( FILES "${NNFW_BINARY_DIR}/NNFWConfig.cmake" DESTINATION share/nnfw )
		INSTALL( FILES "${NNFW_BINARY_DIR}/NNFWConfigVersion.cmake" DESTINATION share/nnfw )
		INSTALL( PROGRAMS ${NNFW_BINARY_DIR}/nnfw-config DESTINATION bin )
	ENDIF( NOT USE_FRAMEWORKS )
ENDIF (UNIX)

### Setting For Win32 machines
IF( WIN32 AND NOT UNIX )
	ADD_DEFINITIONS( -DNNFW_BUILDING_DLL -DNNFW_WIN )
	IF( CMAKE_BUILD_TYPE MATCHES Debug OR CMAKE_BUILD_TYPE MATCHES RelWithDebInfo )
		ADD_DEFINITIONS( -DNNFW_DEBUG )
	ENDIF( CMAKE_BUILD_TYPE MATCHES Debug OR CMAKE_BUILD_TYPE MATCHES RelWithDebInfo )
	SET_TARGET_PROPERTIES( cnnfw PROPERTIES COMPILE_FLAGS " /DNNFW_DONT_EXPORT " )

	## the creation of NNFWConfig.cmake for windows is to correct... fix it
	CONFIGURE_FILE( ${NNFW_SOURCE_DIR}/bin/nnfw-config_template ${NNFW_BINARY_DIR}/nnfw-config @ONLY IMMEDIATE )
	CONFIGURE_FILE( ${NNFW_SOURCE_DIR}/NNFWConfigVersion.cmake ${NNFW_BINARY_DIR}/NNFWConfigVersion.cmake @ONLY IMMEDIATE )

ENDIF( WIN32 AND NOT UNIX )

