/*! \page introduction Introduction
\addindex introduction
\htmlonly
<div id="navigationBar">
<a href="preface.html"><img src="../img/prevChapter.png"></a> <a href="index.html"><img src="../img/mainToc.png"></a> <a href="tour.html"><img src="../img/nextChapter.png"></a>
</div>
\endhtmlonly
\anchor introduction_toc
<div id="tocContent_nohead">
<ul class="level_one">
    <li>\ref introduction_1 </li>
    <li>\ref introduction_2 </li>
    <li>\ref introduction_3 </li>
    <li>\ref introduction_4 </li>
    <li>\ref introduction_5 </li>
    <li>\ref introduction_6 </li>
    <li>\ref introduction_7 </li>
</ul>
</div>

\section introduction_1 Why another Neural Network library ?
'Why not?' might be a possible answer.

At the beginning of 2005, I looked for a neural network library easy to use, flexible and exentsible as possible as you want.
After some months, I understood that there isn't a such library (or at least I didn't find it). Nonetheless the great numbers of project available on internet there isn't a library developed whith follows aims in mind:
<ol>
    <li> Easy to use and understand; </li>
    <li> Flexibility in all aspect of neural networks; </li>
    <li> Extensible in a straightforward way (providing, also, howtos); </li>
    <li> Computational Efficient. </li>
</ol>
Neural Network Framework was created with these aims in mind.

\ref introduction_toc "[Up]"

\section introduction_2 What is NNFW ?
The NNFW project is a set of C++ classes for creating an huge variety of neural networks. The framework is structured in different levels in order to provides various interfaces for quick-easy utilization and deeply-expert utilization, from newbie to masters:
<ol>
    <li> at low-level it's possibile to act completly free for building complex architecture; from this level expert-users can contribute to NNFW adding new functionalities;</li>
    <li> at mid-level there are classes for quick-creation of common neural networks as multilayer feedforward, Elmann networks, Radial-basis network and so on;</li>
    <li> the possibility to represent a neural network with XML files allow an abstract and general way for accessing to all functionality of NNFW, also to the contribution of expert users;</li>
    <li> a graphical interface it's the high-level way to use the framework; the most user-friendly and for newbie users, or just for playing with complex neural networks;</li>
</ol>
\ref introduction_toc "[Up]"

\section introduction_3 What is NNFW not ?
It's not an application for education purpose. The utilization of this library requires a basic knowledge about neural network and its dynamics. For accessing to all functionalities of NNFW, is required a basic knowledge of C++ and Object-Oriented programming.

Its developed by researched for research-purpose.
\ref introduction_toc "[Up]"

\section introduction_4 Download & Installation

\subsection introduction_41 Requirements
\par CMake
In order to compile the library, the CMake tool is required. Download and Install the latest version available from <a href="http://www.cmake.org">CMake official website</a>.<br>
The Linux users are adviced to install the distribution specific package of CMake even if it is not up-to-date.<br>
The Darwin Universal (Tiger only installer) is recommended for MAC OS X users.

\par Doxygen
In order to generate the API documentation, the Doxygen tool is required. Download and Install the version 1.5.x from <a href="http://www.doxygen.org">Doxygen website</a>.

\par QT 4.x Library
Starting from version 0.6.x, the QT trolltech library version 4.x is required.
You can download it from <a href="http://www.trolltech.com/products/qt/downloads">trolltech website</a>.
The opensource edition of QT is free, select your platform, download it and follow the instruction provided by Trolltech
to install QT library.

\subsection introduction_42 Optional Libraries
\par GSL
For a more reliable (and truly) randomness of Random class you can download and install the GSL (GNU Scientific Library)
version 1.6 (or above). The Linux version is available at the <a href="http://www.gnu.org/software/gsl/">official website</a>. While, the Win32 version is available at the <a href="http://gnuwin32.sourceforge.net/packages/gsl.htm">GnuWin32 project</a>.
For MAC OS X users there are two project that provides an easy way to install opensource projects (like GSL):
<a href="http://darwinports.opendarwin.org/">DarwinPorts</a> and <a href="http://fink.sourceforge.net/">Fink</a>.

\par Intel MKL
Intel MKL (Matrix Kernel Library)

\subsection introduction_43 Choose your package
On the <a href="http://www.nnfw.org/downloads.php">NNFW website</a> there are three package available for downloads.
Choose them that better fits with your needs:

<ul>
    <li> <b>Sources tarball</b>: contains all files for compiling the library and the API documentation </li>
    <li> <b>Static libraries for linux</b>: contains only the headers and eight pre-compiled static libraries created starting from different configurations (release and debug, mkl and not mkl, single and double precision) </li>
    <li> <b>API documentation</b>: contains the HTML version of API documentation browsable off-line </li>
</ul>

Only the first requires CMake and Doxygen, while the second and third ones doesn't requires them.

\subsection introduction_44 Configuring the NNFW
In order to configure the different aspect of NNFW, you have to sets the NNFW_CONFIG variable from CMake configuration interface.
The CMake configurator is different depending on the platform on wich you run it, see the platform specific instruction
for some details about it.
The NNFW_CONFIG variable is a string (empty is allowable) can contains the following keys separated by a space:
<ul>
    <li> double : the library will be compiled using the double precision real numbers (default is single precision) </li>
    <li> mkl : the library will use the MKL interface for speed-up math calculations (default is not) </li>
    <li> gsl : the library will use the GSL interface (default is not) </li>
    <li> shared: a dynamic library will be created instead of the static one; this feature is reported to work only on Linux machines </li>
</ul>
For instance, if NNFW_CONFIG is setted to "mkl double" then the library will be compiled with double precision and linked against Math Kernel Library.

In addition, the standard variable CMAKE_BUILD_TYPE of CMake is also useful to sets how library will be compiled. The possibile options of CMAKE_BUILD_TYPE are Debug, Release, RelWithDebInfo and MinSizeRel. See CMake documentation.

\subsection introduction_45 Compiling NNFW on Linux
<ol>
    <li> Download the source package and unpack it where you want; </li>
    <li> Open your preferred console and move to the directory where NNFW has been unpacked; </li>
</ol>
\par Quick procedure
<ol>
    <li> Launch follow commands: </li>
<code><br>
 $> cmake . <br>
 $> make <br>
 $> make install <br>
</code>
    <li> The library will be installed in the /usr/local directory </li>
</ol>

\par Normal procedure
<ol>
    <li> Launch the program ccmake: </li>
<code> <br>
 $> ccmake . <br>
</code>
    <li> Configure the NNFW_CONFIG variable to fits your needs; (see \ref introduction_44 ) </li>
    <li> Press the "c" key on the keyboard to check the pre-compiling configuration's parameters (please consider that default parametrs should works correctly); </li>
    <li> Press the "g" key on the keyboard to generate the Makefile and return to the Terminal; </li>
    <li> Launch the command "make" to compile the library; </li>
    <li> A file named "libnnfw.a" will be created in lib directory of source tree; </li>
    <li> Now with "make install" the library will be installed in the PREFIX directory configured by ccmake. </li>
</ol>

\par Recommended procedure (out-of-sources building)
<ol>
    <li> Suppose that you unpacked sources in directory /some/place/nnfw-src/</li>
    <li> Create a subdirectory called build: /some/place/nnfw-src/build </li>
    <li> Move to build directory and from there launch ccmake: </li>
<code> <br>
 $> ccmake ../ <br>
</code>
    <li> Configure the NNFW_CONFIG variable to fits your needs; (see \ref introduction_44 ) </li>
    <li> Press the "c" key on the keyboard to check the pre-compiling configuration's parameters (please consider that default parametrs should works correctly); </li>
    <li> Press the "g" key on the keyboard to generate the Makefile and return to the Terminal; </li>
    <li> Launch the command "make" to compile the library; </li>
    <li> A file named "libnnfw.a" will be created in lib directory of build tree; </li>
    <li> Note that all stuffs generated by CMake and Make procedures are localized into the build directory; so the main source tree is kept clean! </li>
    <li> Now with "make install" the library will be installed in the PREFIX directory configured by ccmake. </li>
</ol>

\subsection introduction_46 Compiling NNFW on Mac OS X
<ol>
    <li> Download the source package and unpack it where you want; </li>
    <li> Open the Terminal and move to the directory where NNFW has been unpacked; </li>
    <li> Launch the command "ccmake ." (without quotes) to start the CMake's configuration program; </li>
    <li> Configure the NNFW_CONFIG variable to fits your needs; (see \ref introduction_44 ) </li>
    <li> Press the "c" key on the keyboard to check the pre-compiling configuration's parameters (please consider that default parametrs should works correctly); </li>
    <li> Press the "g" key on the keyboard to generate the Makefile and return to the Terminal; </li>
    <li> Launch the command "make" to compile the library; </li>
    <li> A file named "libnnfw.a" will be created in lib directory of source tree; </li>
</ol>

You can use the libnnfw.a directly from there, but if you want to install it launch the command "make install".
It will copies the headers in PREFIX/include directory (note PREFIX is a CMake variable) and the library in PREFIX/lib.
The library is now installed. If you want to use it with XCode follow that simple steps:

<ol>
    <li> Start creating a new XCode's project and choosing the "C++ standard tool" template; </li>
    <li> According to the Xcode's default setting, in the left section of the program's windows should be present an area called "Group & Files"; </li>
    <li> Locate the "libnnfw.a" file through the Finder and then, "drag&drop" it inside the "Source" subsection of "Group & Files"; (see screenshot below) </li>
    <li> The library is now included in your project; </li>
    <li> Now, you have to configure XCode's "User Header Search Path"; </li>
    <li> Inside the "Group & Files" area, select the project's target and right click them; </li>
    <li> From the contextual menu appeared, choose "Get Info" and move to the "Build" tab; </li>
    <li> Fill the "User Header Search Path" field with the string PREFIX/include/nnfw </li>
</ol>

\image html xcode.jpg "XCode screeshot"
\image latex xcode.pdf "XCode screeshot" width=12cm

\ref introduction_toc "[Up]"

\section introduction_5 Compiling and Running the tutorials
\ref introduction_toc "[Up]"

\section introduction_6 How is organized this manual
\ref introduction_toc "[Up]"

\section introduction_7 Notes about compilers and IDE
\ref introduction_toc "[Up]"


*/

