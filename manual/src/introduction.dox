/*! \page introduction Introduction
\addindex introduction
\htmlonly
<div id="navigationBar">
<a href="preface.html"><img src="../img/prevChapter.png"></a> <a href="index.html"><img src="../img/mainToc.png"></a> <a href="overture.html"><img src="../img/nextChapter.png"></a>
</div>
\endhtmlonly
\anchor introduction_toc
<div id="tocContent_nohead">
<ul class="level_one">
    <li>\ref introduction_1 </li>
    <li>\ref introduction_2 </li>
    <li>\ref introduction_3 </li>
    <li>\ref introduction_4 </li>
    <li>\ref introduction_5 </li>
    <li>\ref introduction_6 </li>
    <li>\ref introduction_7 </li>
</ul>
</div>

\section introduction_1 Why another Neural Network library ?
Why not ?!?! can be a possible answer.

At the beginning of 2005, I looked for a neural network library easy to use, flexible and exentsible as possible as you want.
After some months, I understood that there isn't a such library (or at least I didn't find it). Nonetheless the great numbers of project available on internet there isn't a library developed whith follows aims in mind:
<ol>
    <li> Easy to use and understand; </li>
    <li> Flexibility in all aspect of neural networks; </li>
    <li> Extensible in a straightforward way (providing, also, howtos); </li>
    <li> Computational Efficient. </li>
</ol>
Infatti, la <em>Neural Network Framework</em> non vuole essere una libreria con tutto dentro pronta all'uso cos&igrave; come &egrave;, bens&igrave; si pone l'obiettivo di essere un <em>framework</em> per la realizzazione di proprie reti neurali in piena libert&agrave; fornendo i <em>building blocks</em> fondamentali per la costruzione di reti neurali di ogni genere.
\ref introduction_toc "[Up]"

\section introduction_2 What is NNFW ?
Il progetto Neural Network Framework (NNFW) si pone l'obiettivo di realizzare un insieme di classi C++ che consentono la creazione e l'utilizzo di un'enorme variet&agrave; di reti neurali. Il framework consente di potere usare la capacit&agrave; espressiva dell'infrastruttura a diversi livelli per consentire un uso agevole ed efficacie da parte di ogni utente, dal novizio all'esperto:
<ol>
    <li> a basso livello &egrave; possibile agire in completa libert&agrave; per la costruzione di complesse architetture altrimenti non realizzabili; &egrave; a questo livello che si puo contribuire aggiungendo nuove funzionalit&agrave; alla libreria;</li>
    <li> ad un livello intermedio sono presenti classi per la realizzazione di architetture largamente usate quali multilayer feedforward, Elmann networks, SOM e altre ancora;</li>
    <li> la possibilit&agrave; di descrivere la rete con file XML aggiunge un altro livello di accessibilit&agrave; alle varie funzionalit&agrave; del framework;</li>
    <li> un interfaccia grafica permette a chiunque con poche nozioni sulla libreria di creare e giocare con reti neurali anche complesse</li>
</ol>
\ref introduction_toc "[Up]"

\section introduction_3 What is NNFW not ?
Non &egrave; stata creata a fini educativi... quindi non vi aspettate di imparare le reti neurali da questo tool. L'utente deve sapere cosa &egrave; una rete neurale e le differenze fra le varie tipologie.
\ref introduction_toc "[Up]"

\section introduction_4 Download & Installation

\subsection introducation_41 Using NNFW on Mac OS X 10.4 Tiger in 10 steps

Step 1 - From the NNFW's home page, download the package containing the source files of version 0.5.0. Unpack the archive in a directory of your choice;

Step 2 - Go to: http://www.cmake.org/HTML/Index.html and download the CMake (Cross-platform Make) software. The package for Mac OS X can be found in the "Download" section (choose the "Darwin Universal - Tiger only installer" version). Once downloaded and unpacked, install the software using the installer tool included in the package;

Step 3 - From the Terminal, move to the directory where NNFW has been unpacked. Here, launch the command "ccmake ." (without quotes) to start the CMake's semi-graphical interface;

Step 4 - Press the "c" key on the keyboard to check the pre-compiling configuration's parameters (please consider that default parametrs should works correctly);

Step 5 - Press the "g" key on the keyboard to generate the Makefile and return to the Terminal;

Step 6 - Launch the command "make" to compile the library. A file named "libnnfw.a" will be created.

Step 7 - Launch the command "make install" to "install" the library. The .a file will be copied to "/usr/local/lib". The various headers will be copied to "/usr/local/include/nnfw";

Step 8 - The library is now installed. To use it with XCode, start creating a new XCode's project and choosing the "C++ standard tool" template. According to the Xcode's default setting, in the left section of the program's windows should be present an area called "Group & Files". Locate the "libnnfw.a" file through the Finder, select it then drag&drop it inside the "Source" subsection of "Group&Files".

The screenshot published below should be helpful.

\image html xcode.jpg "XCode screeshot"

Step 9 - The library is now included in your project. Now, all we have to say to XCode is where he can find the NNFW's headers files. Inside the "Group & Files" area, select the project's target and right click them. From the contextual menu appeared, choose "Get Info". Then, move to the "Build" tab and fill the "User Header Search Path" field with the string "/usr/local/include/nnfw" (withouth quotes);

Step 10 - Have fun!  :-)

\ref introduction_toc "[Up]"

\section introduction_5 Compiling and Running the tutorials
\ref introduction_toc "[Up]"

\section introduction_6 How is organized this manual
\ref introduction_toc "[Up]"

\section introduction_7 Notes about compilers and IDE
\ref introduction_toc "[Up]"


*/



/*
Per rendere il framework semplice, flessibile e allo stesso tempo efficiente ho scelto il C++ come linguaggio di sviluppo della libreria. Il linguaggio orientato agli oggetti mi ha permesso di strutturare il codice in modo chiaro e semplice da comprendere, e sopratutto mi ha permesso di rendere il framework facilmente estensibile e flessibile.<br>
La possibilit&agrave; di interfacciarsi con il C, i template e particolarit&agrave; tipiche del C++ (come friend), mi hanno permesso di mantenere efficiente il codice.
*/

