/*! \page overture Overture: the first application
\addindex introduction
\htmlonly
<div id="navigationBar">
<a href="introduction.html"><img src="../img/prevChapter.png"></a> <a href="index.html"><img src="../img/mainToc.png"></a> <a href="mathstuff.html"><img src="../img/nextChapter.png"></a>
</div>
\endhtmlonly
\anchor overture_toc
<div id="tocContent_nohead">
<ul class="level_one">
    <li>\ref overture_1 </li>
</ul>
</div>

\section overture_1 Uno sguardo dall'alto

La NNFW &egrave; composta da un insieme di classi con compiti differenti che possono essere raggrupate nel seguente modo:
<ul>
    <li><b>Math</b>: classi di supporto per i calcolo matematici, vettori, matrici e calcoli vettoriali e matriciali;</li>
    <li><b>Core</b>: classi che implementano i <em>building blocks</em> fondamentali per la costruzione di reti neurali;</li>
    <li><b>Gestione Reti Neurali</b>: classi che permettono di 'vedere' la rete neurale come un insieme, un tutto;</li>
    <li><b>Apprendimento</b>: classi dedicate per l'implementazione di algoritmi di apprendimento.</li>
</ul>

\subsection overture_11 Core: Clusters & Linkers

Sono due le classi fondamentali per la costruzioni delle reti neurali con la NNFW: <em>Cluster</em> e <em>Linker</em>.

Il <em>Cluster</em> &egrave; un gruppo di neuroni, un layer. Non esiste una classe <em>Neurone</em>, bens&igrave; il <em>Cluster</em> &egrave; un vettore di neuroni. Le propriet&agrave; di ogni neurone, quali input, funzione d'attivazione e altre, vengono configurate attraverso i metodi della classe <em>Cluster</em>.

\code
#include "types.h"
#include "simplecluster.h"

SimpleCluster cluster(10, "A_Simple_Cluster"); // Crea un Cluster contenente 10 neuroni
RealVec& ins = cluster.inputs(); // accesso agli ingressi dei neuroni
ins[0] = +1.0;
ins[1] = +2.7;
ins[2] = -0.8;
 // ... ... 
ins[9] = +1.2;
cluster.setFunction( SigmoidFunction( 1.0 ) ); // configura la funzione d'attivazione dei 10 neuroni
cluster.update(); // calcola il valore degli output sulla base degli input e della funzione d'attivazione
cout << cluster.outputs(); // stampa il valore degli output dei neuroni
\endcode

*/

